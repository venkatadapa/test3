<?php

/**
 * @file
 * Decision Making voting app entities related code.
 */
 
/**
 * Defining Constants. 
 */
 define ('CB_QUESTIONS_ADMIN_PATH', 'admin/ballots/questions');
 define ('CB_QUESTIONS_VIEW_PATH', 'ballots-question');
 define ('CB_OPTIONS_ADMIN_PATH', 'admin/ballots/options');
 define ('CB_OPTIONS_VIEW_PATH', 'ballots-option');
 define ('CB_VOTES_ADMIN_PATH', 'admin/ballots/votes');
 define ('CB_VOTES_VIEW_PATH', 'ballots-vote');
  
/**
 * Implements hook_entity_info().
 */
function civiq_ballots_entity_info() {  
  $info = array();  
  $info['cb_questions'] = array(
    'label' => t('Ballot Question'),
    'base table' => 'cb_questions',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'question', //This field value displayed as label like node title in content list page
    ),
    'entity class' => 'CbQuestionsEntity',
    'controller class' => 'CbQuestionsEntityAPIController',
    'access callback' => 'access_cb_questions',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => CB_QUESTIONS_ADMIN_PATH,
      'controller class' => 'CbQuestionsEntityDefaultUIController',
      'file' => 'includes/entity.admin.inc',     
    ),
    'fieldable' => TRUE,    
    /*'inline entity form' => array(
        'controller' => 'ProjectInlineEntityFormController',
    ),*/
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'civiq_ballots',
  );
  
  $info['cb_options'] = array(
    'label' => t('Ballot Option'),
    'base table' => 'cb_options',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'cb_option',
    ),
    'entity class' => 'CbOptionsEntity',
    'controller class' => 'CbOptionsEntityApiController',
    'access callback' => 'access_cb_options',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => CB_OPTIONS_ADMIN_PATH,
      'controller class' => 'CbQuestionsEntityDefaultUIController',
      'file' => 'includes/entity.admin.inc',
    ),        
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'civiq_ballots',
  );
  
  $info['cb_votes'] = array(
    'label' => t('Ballot Vote'),
    'base table' => 'cb_votes',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'vote',
    ),
    'entity class' => 'CbVotesEntity',
    'controller class' => 'CbVotesEntityApiController',
    'access callback' => 'access_cb_votes',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      //'path' => CB_VOTES_ADMIN_PATH,
      'controller class' => 'CbVotesEntityDefaultUIController',
      'file' => 'includes/entity.admin.inc',
    ),    
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'civiq_ballots',
  );
  
  return $info;
}

/**
 * Access call back for questions
 */
function access_cb_questions() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;	
  }
  
  return FALSE;
}

/**
 * Access call back for options
 */
function access_cb_options() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;	
  }
  
  return FALSE;	
}

/**
 * Access call back for votes
 */
function access_cb_votes() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;	
  }
  
  return FALSE;	
}

/**
 * Implements hook_menu().
 **/
function civiq_ballots_menu() {
  $items = array();
  $items['questions'] = array(
    'title' => 'Questions',
    'description' => 'Page with a sortable table',
    'page callback' => 'cb_questions_page',    
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/questions.pages.inc',
  );
  $items['vote'] = array(
    'title' => 'Decision Maker Vote',
    'description' => 'Decision Maker Vote',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cb_options_vote_form', 1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'includes/vote.pages.inc',
  );
  $items['vote-audit'] = array(
    'title' => 'Decision Maker Vote Audit',
    'description' => 'Decision Maker Vote Audit',
    'page callback' => 'cb_options_vote_audit_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'includes/audit.pages.inc',
  );
  $items['vote-results'] = array(
    'title' => 'Decision Maker Vote Results',
    'description' => 'Decision Maker Vote Results',
    'page callback' => 'cb_options_vote_results_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'includes/results.pages.inc',
  );
  
  return $items;
}

/**
 * Helper function for getting question info   
 */
function cb_get_question_info($id) {
  try {	
    $question = db_select('cb_questions', 'q')
      ->fields('q', array('question', 'description'))
      ->condition('id', $id, '=')
      ->execute()
      ->fetchAssoc();
      return $question;
  } catch (Exception $e) {
	return '';   
  }   
}

/**
 * Helper function for getting options   
 */
function cb_get_options($question_id = NULL) {
  $query = db_select('cb_options', 'o')
    ->fields('o', array('id', 'cb_option'));
  if ($question_id !== Null) {
    $query->condition('cb_question_id', $question_id, '=');
  }     
  $results = $query->execute();
  $options = array();  
  foreach($results as $row) {
    $options[$row->id] = $row->cb_option;    
  }
    
  return $options;
}

/**
 * Helper function for getting votes   
 */
function cb_get_votes($question_id = NULL) {
  $query = db_select('cb_votes', 'v')
    ->fields('v', array('id', 'votes'));
  if ($question_id !== Null) {
    $query->condition('cb_question_id', $question_id, '=');
  }     
  $results = $query->execute();
  $votes = array();  
  $voters_profile = array();
  $social_ranking = array();
  foreach($results as $row) {    
    $option_votes = drupal_json_decode($row->votes);    
    $points = get_total_points_for_each_vote($option_votes, $question_id);    
    $voters_profile[] = $option_votes;
    $social_ranking[] = $points['points_raised'];
    $votes[$row->id] = array(
      'votes' => $option_votes,
      'points' => $points['points_raised'],
      'total_points' => $points['total_points_raised'],
      'points_unused' => $points['points_unused'],
    );        
  }
  
  $total_points_each_option = array();
  foreach($social_ranking as $ranking) {
	foreach($ranking as $option_id => $point) {
	  $total_points_each_option[$option_id][] = $point;
    }	  
  }
  
  $total_points_each_option_final = array();
  foreach($total_points_each_option as $option_id => $total) {
	$total_points_each_option_final[$option_id] = array_sum($total);	
  }  
  
  arsort($total_points_each_option_final);
  
  $rankings = array();  
  foreach($total_points_each_option_final as $option_id => $total) {
	if (arg(0) == 'vote-audit') {  
	  //This is for showing high rank option first in audit page 	
      $rankings[] = array(
        'option_id' => $option_id, 
        'total' => $total,
      );
    } 
    else {
	  $rankings[$option_id] = $total;	
	}	  
  }
    
  // Collect how many times each preference given to each option
  $no_times_each_preference_to_each_option = array();
  $each_preference_no_times_voted = array();
  foreach($voters_profile as $profiles) {  
    foreach($profiles as $option_id => $preference) {      
      $no_times_each_preference_to_each_option[$option_id][$preference][] = $preference;
      $each_preference_no_times_voted[$preference][] = $preference;
    }
  }
    
  $data = array(
    'votes' => $votes,
    'no_times_each_preference_to_each_option' => $no_times_each_preference_to_each_option,
    'each_preference_no_times_voted'=> $each_preference_no_times_voted,
    'total_points_each_option' => $rankings,     
  );  
  
  return $data;
}

/**
 * Implements hook_theme().
 */
function civiq_ballots_theme($existing, $type, $theme, $path) {
  $items = array();
 
  $items['cb_audit_page'] = array(
    'variables' => array(
      'question' => NULL, 
      'options' => NULL, 
      'votes' => NULL,
      'no_times_each_preference_to_each_option' => NULL,
      'each_preference_no_times_voted' => Null,
      'total_points_each_option' => NULL,
    ),
    'template' => 'templates/cb-votes'
  );
 
  $items['cb_results_page'] = array(
    'variables' => array(
      'question' => NULL, 
      'options' => NULL, 
      'votes' => NULL,
      'no_times_each_preference_to_each_option' => NULL,
      'each_preference_no_times_voted' => Null,
      'total_points_each_option' => NULL,
      'vote_approvals' => NULL,
    ),
    'template' => 'templates/cb-results'
  );
  
  return $items;
}


/**
 * Function to calculate total points raised for each vote
 */
function get_total_points_for_each_vote($option_votes, $question_id) {  
  // Options of the question
  $options = cb_get_options($question_id);
  $total_options = count($options);
  $options_voted = count($option_votes);
  $diff = 0;
  $points_first_preference = 0;
  // If all options voted
  if ($options_voted == $total_options) {
    $points_first_preference = $total_options;    
  } else {
    $diff = $total_options - $options_voted;
  }

  // If total votes less than total options  
  if ($diff > 0) {
    $points_first_preference = $total_options - $diff;
  }
  
  $points_raised = array();    
  foreach($option_votes as $option_id => $vote_preference) {    
    if ($vote_preference == 1) {
      $points_raised[$option_id] = $points_first_preference;
    } else {    
      /** 
       * Points based on preference
       * 1st = $points_first_preference;
       * 2nd = 1st - 1;
       * 3rd = 1st - 2;
       * 4th = 1st - 3;
       */
      $points_raised[$option_id] = $points_first_preference - ($vote_preference - 1);
    }
  }
  
  $points_first_preference_all_voted = $total_options;
  $points_total = array();
  $key = 0;
  foreach($options as $option) {
    if ($key == 0) {
      $points_total[$key] = $points_first_preference_all_voted;
    } else {
      $points_total[$key] = $points_first_preference_all_voted - $key;   
    }    
    $key++;
  }
  
  $total_points_raised = array_sum($points_raised);
  $points_unused = array_sum($points_total) - $total_points_raised;  
  return array(  
    'points_raised' => $points_raised,
    'total_points_raised' => $total_points_raised,
    'points_unused' => $points_unused 
  );
}
