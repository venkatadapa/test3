<?php

/**
 * @file
 * Decision Making voting app entities related code.
 */
 
/**
 * Defining Constants. 
 */
 define ('CB_QUESTIONS_ADMIN_PATH', 'admin/ballots/questions');
 define ('CB_QUESTIONS_VIEW_PATH', 'ballots-question');
 define ('CB_OPTIONS_ADMIN_PATH', 'admin/ballots/options');
 define ('CB_OPTIONS_VIEW_PATH', 'ballots-option');
 define ('CB_VOTES_ADMIN_PATH', 'admin/ballots/votes');
 define ('CB_VOTES_VIEW_PATH', 'ballots-vote');
  
/**
 * Implements hook_entity_info().
 */
function civiq_ballots_entity_info() {  
  $info = array();  
  $info['cb_questions'] = array(
    'label' => t('Ballot Question'),
    'base table' => 'cb_questions',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'question', //This field value displayed as label like node title in content list page
    ),
    'entity class' => 'CbQuestionsEntity',
    'controller class' => 'CbQuestionsEntityAPIController',
    'access callback' => 'access_cb_questions',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => CB_QUESTIONS_ADMIN_PATH,
      'controller class' => 'CbQuestionsEntityDefaultUIController',
      'file' => 'includes/entity.admin.inc',     
    ),
    'fieldable' => TRUE,    
    /*'inline entity form' => array(
        'controller' => 'ProjectInlineEntityFormController',
    ),*/
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'civiq_ballots',
  );
  
  $info['cb_options'] = array(
    'label' => t('Ballot Option'),
    'base table' => 'cb_options',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'cb_option',
    ),
    'entity class' => 'CbOptionsEntity',
    'controller class' => 'CbOptionsEntityApiController',
    'access callback' => 'access_cb_options',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => CB_OPTIONS_ADMIN_PATH,
      'controller class' => 'CbQuestionsEntityDefaultUIController',
      'file' => 'includes/entity.admin.inc',
    ),        
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'civiq_ballots',
  );
  
  $info['cb_votes'] = array(
    'label' => t('Ballot Vote'),
    'base table' => 'cb_votes',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'vote',
    ),
    'entity class' => 'CbVotesEntity',
    'controller class' => 'CbVotesEntityApiController',
    'access callback' => 'access_cb_votes',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => CB_VOTES_ADMIN_PATH,
      'controller class' => 'CbVotesEntityDefaultUIController',
      'file' => 'includes/entity.admin.inc',
    ),    
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'civiq_ballots',
  );
  
  return $info;
}

/**
 * Access call back for questions
 */
function access_cb_questions() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;	
  }
  
  return FALSE;
}

/**
 * Access call back for options
 */
function access_cb_options() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;	
  }
  
  return FALSE;	
}

/**
 * Access call back for votes
 */
function access_cb_votes() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;	
  }
  
  return FALSE;	
}

/**
 * Implements hook_menu().
 **/
function civiq_ballots_menu() {
  $items = array();
  $items['questions'] = array(
    'title' => 'Questions',
    'description' => 'Page with a sortable table',
    'page callback' => 'cb_questions_page',    
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/questions.pages.inc',
  );
  $items['vote'] = array(
    'title' => 'Decision Maker Vote',
    'description' => 'Decision Maker Vote',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cb_options_vote_form', 1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'includes/vote.pages.inc',
  );
  $items['vote-audit'] = array(
    'title' => 'Decision Maker Vote Audit',
    'description' => 'Decision Maker Vote Audit',
    'page callback' => 'cb_options_vote_audit_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'includes/audit.pages.inc',
  );
  $items['vote-results'] = array(
    'title' => 'Decision Maker Vote Results',
    'description' => 'Decision Maker Vote Results',
    'page callback' => 'cb_options_vote_results_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'includes/results.pages.inc',
  );
  
  return $items;
}

/**
 * Helper function for getting question info   
 */
function cb_get_question_info($id) {
  $question = db_select('cb_questions', 'q')
    ->fields('q', array('question', 'description'))
    ->condition('id', $id, '=')
    ->execute()
    ->fetchAssoc();
    
  return $question;
}

/**
 * Helper function for getting options   
 */
function cb_get_options($question_id = NULL) {
  $query = db_select('cb_options', 'o')
    ->fields('o', array('id', 'cb_option'));
  if ($question_id !== Null) {
    $query->condition('cb_question_id', $question_id, '=');
  }     
  $results = $query->execute();
  $options = array();  
  foreach($results as $row) {
    $options[$row->id] = $row->cb_option;    
  }
    
  return $options;
}

/**
 * Helper function for getting votes   
 */
function cb_get_votes($question_id = NULL) {
  $query = db_select('cb_votes', 'v')
    ->fields('v', array('id', 'votes'));
  if ($question_id !== Null) {
    $query->condition('cb_question_id', $question_id, '=');
  }     
  $results = $query->execute();
  $votes = array();  
  foreach($results as $row) {
    $votes[$row->id] = drupal_json_decode($row->votes);    
  }
    
  return $votes;
}
